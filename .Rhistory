knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
library(tidyverse)
library(ggplot2)
data <- read.csv("spam.csv", header = TRUE)
colnames(data)
View(data)
class(data$spam)
levels(data$spam)
print(paste0("Percentage: ", round((nrow(filter(data, spam == TRUE))/nrow(data)) * 100, 2), "%"))
ggplot(data, aes(x=spam))
ggplot(data, aes(x=spam, y=nrow))
ggplot(data, aes(x=spam, y=testid))
View(data)
ggplot(data, aes(x=crl.ave)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
data$crl.ave
ggplot(data, aes(x=crl.ave)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x=spam)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
colnames(data)
ggplot(data, aes(x=table)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x=make)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x=all)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x=cr.long)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x=crl.long)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data, aes(x=crl.long)) +
geom_bar(aes(y = (..count..)/sum(..count..))) + xlim(2000)
ggplot(data, aes(x=crl.long)) +
geom_bar(aes(y = (..count..)/sum(..count..))) + xlim(2000, 0)
ggplot(data, aes(x=crl.long)) +
geom_bar(aes(y = (..count..)/sum(..count..))) + xlim(2000, 1)
ggplot(data, aes(x=crl.long)) +
geom_bar(aes(y = (..count..)/sum(..count..))) + xlim(2000, 0)
ggplot(data, aes(x=crl.long)) +
geom_bar(aes(y = (..count..)/sum(..count..))) + xlim(1000, 1)
data$spam <- recode(data$spam,
FALSE = "Not Spam",
TRUE = "Spam")
levels(data$spam)
data$spam <- recode(data$spam,
FALSE = "Not Spam",
TRUE = "Spam")
data$spam <- recode(data$spam, FALSE = "Not Spam", TRUE = "Spam")
data$spam <- recode(data$spam, FALSE = "Not Spam", TRUE = "Spam")
data$spam <- recode(data$spam, FALSE == "Not Spam", TRUE == "Spam")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(ggplot2)
data <- read.csv("spam.csv", header = TRUE)
print(paste0("Percentage: ", round((nrow(filter(data, spam == TRUE))/nrow(data)) * 100, 2), "%"))
View(data)
glimpse(data)
class(data$project[0])
class(data$spam[0])
class(data$testid[0])
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
train <- subset(data, testid == TRUE)
test <- subset(data, testid == TRUE)
train <- subset(data, testid == FALSE)
print(paste0("Train > Percentage: ", round((nrow(filter(train, spam == TRUE))/nrow(data)) * 100, 2), "%"))
print(paste0("Test  > Percentage: ", round((nrow(filter(test, spam == TRUE))/nrow(data)) * 100, 2), "%"))
View(test[,-2])
train <- subset(data[,-3], testid == FALSE)
test <- subset(data[,-3], testid == TRUE)
print(paste0("Train > Percentage: ", round((nrow(filter(train, spam == TRUE))/nrow(data)) * 100, 2), "%"))
print(paste0("Test  > Percentage: ", round((nrow(filter(test, spam == TRUE))/nrow(data)) * 100, 2), "%"))
View(train)
train <- subset(data, testid == FALSE)
test <- subset(data, testid == TRUE)
train <- train[,-3]
test <- test[,-3]
View(train)
train <- subset(data[, -2], testid == FALSE)
test <- subset(data[, -2], testid == TRUE)
train <- subset(data, testid == FALSE)
test <- subset(data, testid == TRUE)
train <- subset(data[, -2], testid == FALSE)
test <- subset(data[, -2], testid == TRUE)
train <- subset(data, testid == FALSE)
test <- subset(data, testid == TRUE)
train <- subset(data, testid == FALSE)
test <- subset(data, testid == TRUE)
train <- train[, -2]
test <- test[, -2]
View(train)
data$spam <- as.factor(data$spam)
View(data)
class(data$spam[0])
class(train$spam[0])
reg_tree <- rpart(spam~., data = train, control = rpart.control(minsplit = 30))
View(reg_tree)
fancyRpartPlot(reg_tree)
plot(reg_tree)
prp(reg_tree)
View(reg_tree)
df <- data.frame(imp = reg_tree$variable.importance)
df2 <- df %>%
tibble::rownames_to_column() %>%
dplyr::rename("variable" = rowname) %>%
dplyr::arrange(imp) %>%
dplyr::mutate(variable = forcats::fct_inorder(variable))
ggplot2::ggplot(df2) +
geom_col(aes(x = variable, y = imp),
col = "black", show.legend = F) +
coord_flip() +
scale_fill_grey() +
theme_bw()
gs <- list(minsplit = c(2, 5, 10, 20, 30),
maxdepth = c(1, 3, 5, 10, 20)) %>%
cross_d() # Convert to data frame grid
gs
gs <- list(minsplit = c(2, 5, 10, 20, 30),
maxdepth = c(1, 3, 5, 10, 20)) %>%
cross_df() # Convert to data frame grid
gs
gs <- list(minsplit = c(2, 5, 10, 20, 30),
maxdepth = c(1, 3, 5, 10, 20)) %>%
cross_df() # Convert to data frame grid
mod <- function(...) {
rpart(Species ~ ., data = train, control = rpart.control(...))
}
gs <- gs %>% mutate(fit = pmap(gs, mod))
mod <- function(...) {
rpart(spam ~ ., data = train, control = rpart.control(...))
}
gs <- gs %>% mutate(fit = pmap(gs, mod))
compute_accuracy <- function(fit, test_features, test_labels) {
predicted <- predict(fit, test, type = "class")
mean(predicted == spam)
}
compute_accuracy <- function(fit, test_features, test_labels) {
predicted <- predict(fit, test_features, type = "class")
mean(predicted == test_labels)
}
test_features <- test %>% select(-spam)
test_labels   <- test$spam
gs <- gs %>%
mutate(test_accuracy = map_dbl(fit, compute_accuracy,
test_features, test_labels))
View(test_features)
View(gs)
View(gs)
predict(fit, test_features, type = "class")
map_dbl(fit, compute_accuracy,
test_features, test_labels)
summary(reg_tree)
compute_accuracy(reg_tree, test_features, test_labels)
reg_tree2 <- rpart(spam~., data = train)
plot(reg_tree2)
pdp(reg_tree2)
class(test$spam[0])
gs <- list(minsplit = c(2, 5, 10, 20, 30),
maxdepth = c(1, 3, 5, 10, 20)) %>%
cross_df() # Convert to data frame grid
mod <- function(...) {
rpart(spam ~ ., data = train, control = rpart.control(...))
}
gs <- gs %>% mutate(fit = pmap(gs, mod))
compute_accuracy <- function(fit, test_features, test_labels) {
predicted <- predict(fit, test_features, type = "class")
mean(predicted == test_labels)
}
test_features <- test %>% select(-spam)
test_labels   <- test$spam
gs <- gs %>%
mutate(test_accuracy = map_dbl(fit, compute_accuracy,
test_features, test_labels))
data$spam <- as.factor(data$spam)
train <- subset(data, testid == FALSE)
test <- subset(data, testid == TRUE)
train <- train[, -2]
test <- test[, -2]
print(paste0("Train > Percentage: ", round((nrow(filter(train, spam == TRUE))/nrow(data)) * 100, 2), "%"))
print(paste0("Test  > Percentage: ", round((nrow(filter(test, spam == TRUE))/nrow(data)) * 100, 2), "%"))
class(test$spam[0])
gs <- list(minsplit = c(2, 5, 10, 20, 30),
maxdepth = c(1, 3, 5, 10, 20)) %>%
cross_df() # Convert to data frame grid
mod <- function(...) {
rpart(spam ~ ., data = train, control = rpart.control(...))
}
gs <- gs %>% mutate(fit = pmap(gs, mod))
compute_accuracy <- function(fit, test_features, test_labels) {
predicted <- predict(fit, test_features, type = "class")
mean(predicted == test_labels)
}
test_features <- test %>% select(-spam)
test_labels   <- test$spam
gs <- gs %>%
mutate(test_accuracy = map_dbl(fit, compute_accuracy,
test_features, test_labels))
gs
View(gs)
reg_tree <- rpart(spam~., data = train, control = rpart.control(minsplit = 30, maxdepth = 10))
pdp(reg_tree)
prp(reg_tree)
confusionMatrix(predict(reg_tree, test_features, type = "class"), test$spam, positive = 'spam')
library(caret)
install.packages("caret")
library(caret)
confusionMatrix(predict(reg_tree, test_features, type = "class"), test$spam, positive = 'spam')
install.packages("e1071")
confusionMatrix(predict(reg_tree, test_features, type = "class"), test$spam, positive = 'spam')
confusionMatrix(predict(reg_tree, test_features, type = "class"), test$spam, positive = 'TRUE')
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
data$spam <- as.factor(data$spam)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
data <- read.csv("spam.csv", header = TRUE)
data$spam <- as.factor(data$spam)
train <- subset(data, testid == FALSE)
test <- subset(data, testid == TRUE)
train <- train[, -2]
test <- test[, -2]
compute_accuracy <- function(fit, test_features, test_labels) {
predicted <- predict(fit, test_features, type = "class")
mean(predicted == test_labels)
}
test_features <- test %>% select(-spam)
test_labels   <- test$spam
reg_tree <- rpart(spam~., data = train, control = rpart.control(minsplit = 30))
compute_accuracy(reg_tree, test_features, test_labels)
reg_tree <- rpart(spam~., data = train)
compute_accuracy(reg_tree, test_features, test_labels)
View(reg_tree)
prp(reg_tree)
View(reg_tree)
reg_tree <- rpart(spam~., data = train, control = rpart.control(minsplit = 3))
prp(reg_tree)
compute_accuracy(reg_tree, test_features, test_labels)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(minsplit = 3))
compute_accuracy(reg_tree2, test_features, test_labels)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(minsplit = 3343))
compute_accuracy(reg_tree2, test_features, test_labels)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(minsplit = 1))
compute_accuracy(reg_tree2, test_features, test_labels)
prp(reg_tree)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(maxdepth = 1))
prp(reg_tree)
compute_accuracy(reg_tree2, test_features, test_labels)
prp(reg_tree2)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(minsplit = 3))
prp(reg_tree2)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(maxdepth = 3))
prp(reg_tree2)
compute_accuracy(reg_tree2, test_features, test_labels)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(maxdepth = 2))
compute_accuracy(reg_tree2, test_features, test_labels)
reg_tree2 <- rpart(spam~., data = train, control = rpart.control(maxdepth = 4))
compute_accuracy(reg_tree2, test_features, test_labels)
gs <- list(minsplit = c(2, 5, 10, 20, 30),
maxdepth = c(2, 5, 10, 20, 30)) %>%
cross_df() # Convert to data frame grid
mod <- function(...) {
rpart(spam ~ ., data = train, control = rpart.control(...))
}
gs <- gs %>% mutate(fit = pmap(gs, mod))
gs <- gs %>% mutate(fit = pmap(gs, mod))
gs <- gs %>%
mutate(test_accuracy = map_dbl(fit, compute_accuracy,
test_features, test_labels))
gs
table(gs)
tibble(gs)
data_frame(gs)
print.data.frame(gs)
View(gs)
print.data.frame(gs[, c("minsplit", "maxdepth", "test_accuracy")])
gs[, c("minsplit", "maxdepth", "test_accuracy")] %>% filter(variable=="minsplit")
View(data)
df <- read.csv("ptf-smf.csv")
df <- read.csv('ptf-smf.csv')
df <- read.csv('ptf-smf.csv', header = TRUE)
df <- read.csv('ptf-smf.csv', header = TRUE, sep = ",")
readxl::read_xls('ptf-smf.xls')
df <- readxl::read_xls('ptf-smf.xls')
View(df)
names(df)
df <- readxl::read_xls('ptf-smf.xls')
names(df)
library(dplyr)
View(filter(df, ))
class(df$Date[0])
df$Date[0][,5]
df$Date[0][,-5]
df$Date[0][:-5]
df$Date[0][1:5]
df$Date[0][0:1]
df$Date[0]
df$Date[1]
df$Date[1][0:1]
df$Date[1][0:4]
df$Date[1][1]
df$Date[1][1][3]
df$Date[1][1][1]
View(df)
cnmaes <- c("date", "mcp", "smp", "pip", "nip", "direction")
colnames(df) <- cnames
cnames <- c("date", "mcp", "smp", "pip", "nip", "direction")
colnames(df) <- cnames
View(df)
ggplot(data = df, aes(x = date, y = mcp))+
geom_line()
library(ggplot2)
ggplot(data = df, aes(x = date, y = mcp))+
geom_line()
df$date <- strptime(df$date,format="%d.%m.%y %H:%M")
ggplot(data = df, aes(x = date, y = mcp))+
geom_line()
day(df$date)
lubridate::day(df$date[0])
lubridate::day(df$date[1])
lubridate::day(df$date[134])
lubridate::hour(df$date[13])
df$hour <- lubridate::hour(df$date)
ggplot(data = df, aes(x = date, y = mcp))+
geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
df <- readxl::read_xls('ptf-smf.xls')
cnames <- c("date", "mcp", "smp", "pip", "nip", "direction")
colnames(df) <- cnames
df$date2 <- strptime(df$date,format="%d.%m.%y %H:%M")
df$hour <- lubridate::hour(df$date2)
ggplot(filter(df, hour == 0)[, c("date", "mcp")], aes(x = date, y = mcp))+
geom_line()
View(filter(df, hour == 0)[, c("date", "mcp")])
library(viridis)
library(hrbrthemes)
dd <- melt(filter(df, hour == 0)[, c("date", "mcp", "smp")], id=c("date"))
Summary <- dd %>% group_by(date, variable) %>% summarise(Total_Sales = sum(value))
ggplot(Summary, aes(fill=variable, y=Total_Sales, x=date)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
ggtitle("Auto vs. Commercial") +
#theme_ipsum() +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +
xlab("")
df$mcp <- as.numeric(df$mcp)
df$smp <- as.numeric(df$smp)
df$pip <- as.numeric(df$pip)
df$nip <- as.numeric(df$nip)
library(viridis)
library(hrbrthemes)
dd <- melt(filter(df, hour == 0)[, c("date", "mcp", "smp")], id=c("date"))
Summary <- dd %>% group_by(date, variable) %>% summarise(Total_Sales = sum(value))
ggplot(Summary, aes(fill=variable, y=Total_Sales, x=date)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
ggtitle("Auto vs. Commercial") +
#theme_ipsum() +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +
xlab("")
ggplot(filter(df, hour == 0)[, c("date", "mcp")], aes(x = date, y = mcp))+
geom_line()
View(df)
View(df)
ggplot(filter(df, hour == 0)[, c("date", "mcp")], aes(x = date, y = mcp))+
geom_line()
ggplot(df, aes(x = smp, y = mcp))+
geom_line()
ggplot(df, aes(x = smp, y = mcp))+
geom_point()
ggplot(filter(df, hour == 0)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
geom_point()
ggplot(filter(df, hour == 12)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
geom_point()
ggplot(filter(df, hour == 12)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
coord_cartesian(xlim = c(0, 400), ylim = c(0, 400)) + geom_point()
ggplot(filter(df, hour == 24)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
coord_cartesian(xlim = c(0, 400), ylim = c(0, 400)) + geom_point()
ggplot(filter(df, hour == 23)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
coord_cartesian(xlim = c(0, 400), ylim = c(0, 400)) + geom_point()
7
ggplot(filter(df, hour == 7)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
coord_cartesian(xlim = c(0, 400), ylim = c(0, 400)) + geom_point()
ggplot(filter(df, hour == 12)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
coord_cartesian(xlim = c(0, 400), ylim = c(0, 400)) + geom_point()
ggplot(filter(df, hour == 16)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
coord_cartesian(xlim = c(0, 400), ylim = c(0, 400)) + geom_point()
ggplot(filter(df, hour == 23)[, c("date", "mcp", "smp")], aes(x = mcp, y = smp))+
coord_cartesian(xlim = c(0, 400), ylim = c(0, 400)) + geom_point()
ggplot(filter(df, hour == 23)[, c("date", "mcp", "smp")], aes(x = date, y = mcp))+
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +geom_line()
ggplot(filter(df, hour == 23)[, c("date", "mcp", "smp")], aes(x = smp, y = mcp))+
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +geom_line()
ggplot(filter(df, hour == 23)[, c("date", "mcp", "smp")], aes(x = smp, y = mcp))+
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +geom_point()
ggplot(melt(filter(df, hour == 23)[, c("date", "mcp", "smp")], id=c("date")), aes(x = date, y = value, group = variable)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
ggtitle("MCP vs. SMP") +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1))
library(reshape2)
ggplot(melt(filter(df, hour == 23)[, c("date", "mcp", "smp")], id=c("date")), aes(x = date, y = value, group = variable)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
ggtitle("MCP vs. SMP") +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1))
df$date[3]
lubridate::date(df$date[3])
lubridate::mday(df$date[3])
lubridate::day(df$date[3])
lubridate::day(df$date2[3])
View(df)
library(dplyr)
library(ggplot2)
library(reshape2)
df <- readxl::read_xls('ptf-smf.xls')
df <- readxl::read_xls('ptf-smf.xls')
cnames <- c("date", "mcp", "smp", "pip", "nip", "direction")
colnames(df) <- cnames
df$date2 <- strptime(df$date,format="%d.%m.%y %H:%M")
df$hour <- lubridate::hour(df$date2)
df$day <- lubridate::day(df$date2)
df$mcp <- as.numeric(df$mcp)
df$smp <- as.numeric(df$smp)
df$pip <- as.numeric(df$pip)
df$nip <- as.numeric(df$nip)
df$dummy <- 1
View(df)
library(viridis)
library(hrbrthemes)
dd <- melt(df[, c("day", "direction", "dummy")], id=c("day"))
Summary <- dd %>% group_by(day, variable) %>% summarise(Periods = sum(dummy))
ggplot(Summary, aes(fill=variable, y=Periods, x=day)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
ggtitle("Balance Direction") +
#theme_ipsum() +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +
xlab("")
library(viridis)
library(hrbrthemes)
dd <- melt(df[, c("day", "direction", "dummy")], id=c("day"))
Summary <- dd %>% group_by(day, variable) %>% summarise(Periods = sum(dummy))
ggplot(data=Summary, aes(fill=variable, y=Periods, x=day)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
ggtitle("Balance Direction") +
#theme_ipsum() +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +
xlab("")
library(viridis)
library(hrbrthemes)
dd <- melt(df[, c("day", "direction", "dummy")], id=c("day"))
df3 <- dd %>% group_by(day, variable) %>% summarise(Periods = sum(dummy))
ggplot(df3, aes(fill=variable, y=Periods, x=day)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
ggtitle("Balance Direction") +
#theme_ipsum() +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +
xlab("")
dd <- melt(df[, c("day", "direction", "dummy")], id=c("day"))
df3 <- dd %>% group_by(day, variable) %>% summarise(Periods = sum(dummy))
View(dd)
library(viridis)
library(hrbrthemes)
dd <- melt(df[, c("day", "direction", "dummy")], id=c("day", "direction"))
df3 <- dd %>% group_by(day, variable) %>% summarise(Periods = sum(dummy))
ggplot(df3, aes(fill=variable, y=Periods, x=day)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
ggtitle("Balance Direction") +
#theme_ipsum() +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +
xlab("")
dd <- melt(df[, c("day", "direction", "dummy")], id=c("day", "direction"))
View(dd)
df3 <- dd %>% group_by(day, direction) %>% summarise(Periods = sum(value))
View(df3)
ggplot(df3, aes(fill=direction, y=Periods, x=day)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
ggtitle("Balance Direction") +
#theme_ipsum() +
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=1)) +
xlab("")
